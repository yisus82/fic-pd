********PRACTICA 4   PROGRAMACION DECLARATIVA********
**** Jesús Ángel Pérez-Roca Fernández (infjpf02) ****
*****************************************************


REDEFINIR LAS SIGUIENTES FUNCIONES

FUNCION						FUNCION EQUIVALENTE

 lenght						 let rec length l= if l=[] then 0 else (1 + length (List.tl l));;

 hd						 exception Hd of string;;
                                                 let hd l=match l with
                                                        []-> raise(Hd "No se puede usar con []")
        						|h::_->h;;

 tl 						 exception Tl of string;;
                                                 let tl l=match l with
        						[]-> raise(Tl "No se puede usar con []")
        						|_::t->t;;

 nth						 exception Nth of string;;
						 let rec nth l n=match l with
					                     []->raise(Nth "No se encontro el elemento deseado")
                  					     |h::t->if n=0 then h else (if n<0 then raise (Nth "El segundo argumento no puede ser negativo") else nth t (n-1));;

 rev						 let rev l=let rec aux(l1, l2)=match l1 with 
									    []->l2
									    |h::t->aux(t,h::l2)
												in aux(l,[]);;

 append						 let rec append l1 l2=match l1 with
								   []->if l2=[] then []
										else append l2 []
								   |h::t->h::append t l2;;

 concat						 let concat l1 l2=let rec aux(l1,l2)=match l1 with
											[]->if l2=[] then []
												     else aux(l2,[])
											|h::t->h::aux(t,l2)
													   in let rec aux2 l=match l with
                                                                 							   []->[]
                                                                 							   |[[]]->[]
								 							   |h::t->aux(h,(aux2 t))
																		   in aux((aux2 l1),(aux2 l2));;

 flatten					 let rec flatten l=match l with
                                                                 []->[]
                                                                 |[[]]->[]
								 |h::t->let rec aux(l1,l2)=match l1 with
											[]->if l2=[] then []
												     else aux(l2,[])
											|h::t->h::aux(t,l2)
													    in aux(h,(flatten t));;
                                                             
 for_all					 let rec for_all p l=match l with
                                                                   []->true
                                                                   |h::[]->p h
                                                                   |h::t->(p h) & (for_all p t);;

 exists						 let rec exists p l=match l with
                                                                  []->false
                                                                  |h::[]->p h
                                                                  |h::t->(p h) or (exists p t);;

 mem						 let rec mem x l=match l with
                                                               []->false
                                                               |h::[]->x=h
                                                               |h::t->(x=h) or (mem x t);;
 
 find						 exception Find of string;;
                                                 let rec find p l=match l with
                                                                []->raise(Find "No se encontro ningun elemento que cumpla la propiedad")
                                                                |h::[]->if (p h) then h else raise(Find "No se encontro ningun elemento que cumpla la propiedad")
                                                                |h::t->if (p h) then h else (find p t);;

 filter						 let rec filter p l=match l with
                                                                  []->[]
                                                                  |h::t->if (p h) then h::(filter p t) else (filter p t);;

 partition					 let rec partition p l=match l with
                                                                     []->([],[])
                                                                     |h::t->let (l1,l2)= partition p t in if (p h) then (h::l1,l2) else (l1,h::l2);;                                                                     |


 
¿COMO SE PODRIA DEFINIR LA FUNCION mem UTILIZANDO exists?

 let mem x l=exists ((function x->function y->if (x=y) then true else false) x) l;;



¿COMO SE PODRIA DEFINIR LA FUNCION partition UTILIZANDO filter?

 let partition p l=(filter p l),(filter ((function x->function y->if (x y) then false else true) p) l);;

¿SERIA MENOS EFICIENTE QUE DEFINIRLA POR SEPARADO?

 Sí, porque si, por ejemplo, después de definir mem usando exists, modificamos exists la funcion mem cambia mientras que si las definimos por separado podemos modificar una sin modificar la otra.



REDEFINIR LAS FUNCIONES SIGUIENTES

FUNCION						FUNCION EQUIVALENTE

 map						 let rec map f l=match l with
                                                               []->[]
							       |h::[]->[f h]
                                                               |h::t->(f h)::(map f t);;
 
 fold_left					 let rec fold_left f a l=match l with
								       []->a
                                                                       |h::[]->f a h
								       |h::t->let a=f a h in fold_left f a t;;

 fold_right					 let rec fold_right f l a=match l with
									[]->a
									|h::[]->f h a
									|h::t->let a=fold_right f t a in f h a;;



¿COMO SE PODRIAN DEFINIR LAS FUNCIONES for_all Y exists CON ALGUNA DE LAS TRES FUNCIONES ANTERIORES?

FUNCION						FUNCION EQUIVALENTE

 for_all					 let for_all p l=(fold_left (function x->function y->if x then y else false) true (map p l));;

 exists						 let exists p l=(fold_left (function x->function y->if x then true else y) false (map p l));;



¿COMO SE PODRIAN DEFINIR LA FUNCION exists A PARTIR DE LA for_all (O VICEVERSA) UTILIZANDO map Y LA NEGACION LOGICA?

 let for_all p l= not (exists (function x->if x then false else true)(map p l));;



TAL COMO ESTAN DEFINIDAS LAS FUNCIONES exists Y for_all SE APLICA SIEMPRE p A TODOS LOS ELEMENTOS DE l?

 Si, pero se podia definir exists de modo que si al aplicar p a un elemento de la lista diese true, la funcion devolviese true y no siguiese buscando, y si no que siguiese buscando.
 Tambien se podia definir for_all de modo que al aplicar p a un elemento de la lista diese false, la funcion devolviese false y no siguiese buscando, y si no que siguiese buscando.
 Todo esto se podria hacer poniendo un if.

 let rec for_all2 p l=match l with
                    []->true
                    |h::[]->p h
                    |h::t->if (p h) then (for_all p t) else false;;

 let rec exists2 p l=match l with
                   []->false
                   |h::[]->p h
                   |h::t->if (p h) then true else (exists p t);;


DEFINIR UNA FUNCION QUE PERMITA PASAR A MODO CURRY Y SU INVERSA

let curry f=function x->function y->f(x,y);;

let uncurry f= function (x,y)-> f x y;;



DEFINIR UNA FUNCION sort_insert:'a list->'a list PARA ORDENAR LISTAS POR EL METODO DE INSERCION. PARA ELLO DEFINIR UNA FUNCION insert:'a->'a list->'a list DE MODO QUE insert x lINSERTE x EN l ANTES DEL PRIMER ELEMENTO MAYOR O IGUAL QUE EL

let rec insert x l=match l with
                 []->[x]
                 |h::t->if x <= h then x::l else h::insert x t;;

let rec sort_insert l=match l with
             []->[]
             |h::t->insert h (sort_insert t);; 



DEFINIR LA FUNCION DE FIBONACCI

 exception Fib of string;;
 let rec fib n=if n<0 then raise(Fib "No se puede calcular con numeros negativos") else (if n=0 then 0 else(if n=1 then 1 else (if n<45 then (fib(n-1)+fib(n-2)) else raise (Fib "No se puede calcular con numeros mayores o iguales a 45)));;



¿CUAL ES EL TERMINO MAS GRANDE DE LA SUCESION DE FIBONACCI QUE CABE EN EL TIPO INT?

 El termino mas grande es el fib 44= 701408733